result = {}

for dataset_id in [3, 24, 31, 38, 44, 179, 715, 718, 720]:

    result[dataset_id] = {"logloss":{"rf":[], "nn": [], "ensemble": []},
                          "f1":{"rf":[], "nn": [], "ensemble": []}}    

    df = pd.read_csv('./data/{0}.csv'.format(dataset_id))
    x_cols = [c for c in df.columns if c != 'target']
    X = df[x_cols]
    y = df['target']
    for repeat in range(5):
        seed = 1707+repeat
        X_train, X_test, y_train, y_test = \
            sklearn.model_selection.train_test_split(X, y, test_size = 0.3, random_state=seed)

        automl = AutoML(
                total_time_limit=10*60, # 10 minutes
                algorithms=["RF"],
                train_ensemble=False,
                verbose=False,
            )
        automl.fit(X_train, y_train)
        y_predicted_rf = automl.predict(X_test)
        result[dataset_id]["logloss"]["rf"] += [log_loss(y_test, y_predicted_rf['p_1'])]
        result[dataset_id]["f1"]["rf"] += [f1_score(y_test, y_predicted_rf['label'])]


        automl_nn = AutoML(
                total_time_limit=10*60, # 10 minutes
                algorithms=["NN"],
                train_ensemble=False, 
                verbose=False,
            )
        automl_nn.fit(X_train, y_train)
        y_predicted_nn = automl_nn.predict(X_test)
        result[dataset_id]["logloss"]["nn"] += [log_loss(y_test, y_predicted_nn['p_1'])]
        result[dataset_id]["f1"]["nn"] += [f1_score(y_test, y_predicted_nn['label'])]

        y_predicted_ens = (y_predicted_rf + y_predicted_nn) / 2.0
        result[dataset_id]["logloss"]["ensemble"] += [log_loss(y_test, y_predicted_ens['p_1'])]
 

In the end, I am computing simple ensemble as the average of Random Forests and Neural Network predictions.

It is worth to mention about details of training NN with AutoML. Below are hyperparameters of NN that are selected in AutoML:

NeuralNetworkLearnerBinaryClassificationParams = {
    "dense_layers": [1, 2, 3],
    "dense_1_size": [4, 8, 16, 32, 64, 128],
    "dense_2_size": [4, 8, 16, 32, 64],
    "dense_3_size": [4, 8, 16, 32],
    "dropout": [0, 0.25, 0.5, 0.75],
    "learning_rate": [0.005, 0.01, 0.05, 0.1, 0.2],
    "momentum": [0.85, 0.9, 0.95],
    "decay": [0.0001, 0.001, 0.01],
}
